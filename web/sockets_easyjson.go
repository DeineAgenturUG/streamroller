// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package web

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ = json.RawMessage{}
	_ = jlexer.Lexer{}
	_ = jwriter.Writer{}
)

func easyjson7e4422e8DecodeGithubComDustinblackmanStreamrollerWeb(in *jlexer.Lexer, out *SocketMessage) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "message":
			out.Message = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "user":
			out.User = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson7e4422e8EncodeGithubComDustinblackmanStreamrollerWeb(out *jwriter.Writer, in SocketMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message\":")
	out.String(string(in.Message))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"source\":")
	out.String(string(in.Source))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	out.String(string(in.User))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SocketMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7e4422e8EncodeGithubComDustinblackmanStreamrollerWeb(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SocketMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7e4422e8EncodeGithubComDustinblackmanStreamrollerWeb(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SocketMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7e4422e8DecodeGithubComDustinblackmanStreamrollerWeb(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SocketMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7e4422e8DecodeGithubComDustinblackmanStreamrollerWeb(l, v)
}
